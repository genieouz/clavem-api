# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Arbitrary object"""
scalar Any

type AttachmentRecord {
  id: ID!
  sizeB: Int!
  extension: String!
}

type CategoriesEntity {
  recordsLength: Float!
  totalRecords: Float!
  offset: Float!
  limit: Float!
  pages: Float!
  currentPage: Float!
  records: [CategoryEntity!]!
}

type CategoryEntity {
  _id: ID!
  name: String!
}

input CategoryInput {
  name: String!
}

input ClientFilterInput {
  offset: Int
  limit: Int
  filter: Any
  search: String
  orderBy: OrderByInput
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

enum EventAccessType {
  Uniq
  Free
}

type EventEntity {
  _id: ID!
  description: String!
  address: String!
  locationAccuracy: String!
  status: EventStatus!
  type: EventType!
  name: String!
  catchyPhrase: String!
  createdBy: UserEntity!
  category: CategoryEntity!
  startDate: DateTime!
  endDate: DateTime!
  expectedNumberOfPersons: Float!
  accessType: EventAccessType!
  keepContactWithParticipant: Boolean!
  paidEntrance: Boolean!
  priceIncludingCharges: Boolean!
  categoryCriteria: [String!]!
  purchasedTicketInvolveFreeTicket: TicketRequirements!
  tickets: [Ticket!]!
  reservation: ReservationRequirements!
  poster: ImageSizes!
}

type EventsEntity {
  recordsLength: Float!
  totalRecords: Float!
  offset: Float!
  limit: Float!
  pages: Float!
  currentPage: Float!
  records: [EventEntity!]!
}

enum EventStatus {
  Activated
  Desactivated
  Blocked
}

enum EventType {
  Private
  Public
}

type ImageSizes {
  sm: ID
  md: ID
  lg: ID
}

type Mutation {
  createCategory(categoryInput: CategoryInput!): CategoryEntity!
}

"""OrderBy direction"""
enum OrderByDirection {
  Asc
  Desc
}

input OrderByInput {
  property: String!
  direction: OrderByDirection!
}

type Paging {
  recordsLength: Float!
  totalRecords: Float!
  offset: Float!
  limit: Float!
  pages: Float!
  currentPage: Float!
}

type Query {
  fetchEvents: EventsEntity!
  fetchEvent(eventId: ID!): EventEntity!
  fetchCategories: CategoriesEntity!
}

type ReservationRequirements {
  allowed: Boolean!
  payWhenReservation: Boolean!
  reservationFeeRefundable: Boolean!
  percentageToPay: Float!
  limiteDateConfirmation: DateTime!
}

type Ticket {
  name: String!
  categoryCriteria: String!
  quantity: Float!
  price: Float!
}

type TicketRequirements {
  purchasedTicketInvolveFreeTicket: Boolean!
  purchasedTickets: TicketRequirementsQuantity!
  offeredTickets: TicketRequirementsQuantity!
}

type TicketRequirementsQuantity {
  quantity: Float!
  categoryCriteria: String!
}

type UserEntity {
  _id: ID!
  countryCode: String!
  role: UserRoles!
  gender: UserGender!
  birthDate: DateTime!
  phoneNumber: String!
  lastName: String!
  firstName: String!
  email: String!
}

enum UserGender {
  MALE
  FEMALE
}

enum UserRoles {
  USER
  ADMIN
  ORGANIZER
}
